#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass ociamthesis-lyx
\begin_preamble
%Packages
\usepackage{listings}
\end_preamble
\options a4paper,titlepage
\use_default_options false
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type numerical
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle headings
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Diseño
\begin_inset CommandInset label
LatexCommand label
name "chap:Diseño"

\end_inset


\end_layout

\begin_layout Standard
En esta sección se detallarán de forma teórica el planteamiento de las solucione
s para implementación del videojuego y de las técnicas de predicción de
 trayectorias.
 Para ello se usarán esquemas y figuras para que todo sea mucho más visual.
 El diseño del videojuego se dividirá en 2 partes.
 En la primera de ellas se comenta se describe el videojuego.
 La descripción del videojuego está compuesta por su estructura, examinada
 por partes para poder describirla de una forma clara y sencilla, y la arquitect
ura de red que presenta el videojuego.
 En la segunda parte de la sección se exponen las técnicas de predicción,
 es decir en que partes se ha dividido el diseño y las adaptaciones que
 se han realizado.
  
\end_layout

\begin_layout Section
Descripción de videojuego End Of Shooter
\end_layout

\begin_layout Standard
El videojuego diseñado, bautizado con el nombre de 
\shape italic
End Of Shooter
\shape default
 o EoS, corresponde al género 
\shape italic
First Person Shooter
\shape default
 (FPS), al cual se le llamado .
 El juego consistirá en partidas donde los jugadores deben eliminarse entre
 sí, es decir un todos contra todos.
 Los jugadores contarán con una única arma automática para eliminar a los
 demás jugadores.
 La acción tendrá lugar en mapas sencillos sin muchos obstáculos.
 Además no existe ningún límite de eliminaciones o puntuación para acabar
 la partida: son infinitas.
 Esta mecánica de juego es adecuada para la evaluación.
 El objetivo del juego es, por tanto obtener la máxima puntuación.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
El juego se ejecuta por fotogramas, es decir los cuadros o imágenes distintas
 que el videojuego muestra.
 Cada vez que se va a mostrar un nuevo fotograma se renderizan todos los
 cambios que se mostrarán.
 El juego no tiene límite de fotogramas por segundo por lo que depende de
 la potencia del hardware.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
En las siguientes subsecciones se trataran diversos aspectos del diseño
 de EoS: la estructura del videojuego, y su arquitectura de red.
 
\end_layout

\begin_layout Subsection
Estructura del videojuego
\end_layout

\begin_layout Standard
El diseño del juego se ha hecho para el motor de juegos Unity3D 
\begin_inset CommandInset citation
LatexCommand citep
key "Unity3DWeb"

\end_inset

.
 En Unity3D los juegos se construyen a partir de escenas.
 Una escena es un contenedor de objetos.
 Las escenas pueden usadas para crear un menú principal, niveles individuales,
 y cualquier otra.
 Cada escena es un archivo que representa un nivel.
 En cada escena, se coloca el entorno, los obstáculos, la decoración, etc.
 Los componentes de la escena dependerán de su fin, ya que no es lo mismo
 crear una interfaz para el menú principal que una escena de juego o nivel
 donde se puede jugar.
 Cualquier elemento del juego es una entidad independientemente, como el
 personaje, una bala, un enemigo, vehículo, entorno, obstáculos...
 Existen entidades estáticas como pueden ser los obstáculos y entidades
 móviles como son los personajes o enemigos.
 Se realiza esta definición por que se usa mucho el término entidad para
 referirse a los personajes del videojuego.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
El juego diseñado en este trabajo tiene dos escenas principales.
 En la primera de ellas, el menú, se permite al usuario iniciar una partida,
 unirse a una ya creada y cambiar el mapa en el cual jugar, además se puede
 modificar algunas opciones de sonido y gráficos.
 La segunda escena, la de mayor importancia, es la escena de juego en sí,
 la cual incluye el modelo del mapa que define el entorno, los jugadores
 y otras entidades que se comentarán.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Subsubsection
Escena de menú
\end_layout

\begin_layout Standard
La escena del menú es la más sencilla de comprender.
 El objetivo del menú es mostrar al usuario una interfaz para que pueda
 iniciar el juego así como permitir configurar el sonido o gráficos, por
 ejemplo.
 El menú que se ha diseñado es bastante simple, Al principio, muestra una
 pantalla con 3 botones.
 El primero permite iniciar el juego, el segundo modificar el audio y gráficos
 y el tercero cerrar el juego.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Si se pulsa el botón de juego aparece nuevas posibilidades:
\end_layout

\begin_layout Itemize
Iniciar servidor: está opción es para ser el anfitrión de la partida.
\end_layout

\begin_layout Itemize
Conexión directa: intenta conectarse al servidor situado en la misma máquina.
 Esta opción esta incluida para la facilidad y comodidad al realizar las
 pruebas y la depuración.
\end_layout

\begin_layout Itemize
Seleccionar el mapa: permite elegir el mapa en el que se va a jugar.
 En esta versión se dispone de 2 mapas.
 
\end_layout

\begin_layout Standard
Además, en la zona derecha de la pantalla se muestran los servidores disponibles
, es decir, las partidas a las que poder unirse, indicando cuantos jugadores
 hay en la partida ya.
 En la Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:CapturaMenu"

\end_inset

 se muestra una captura de pantalla del menú del videojuego.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../figures/CapturaMenu.png
	width 75text%
	rotateOrigin center

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Captura de la escena Menú
\begin_inset CommandInset label
LatexCommand label
name "fig:CapturaMenu"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Escena de juego
\end_layout

\begin_layout Standard
La escena de juego es la más compleja, sin duda.
 Esta escena representa el mundo virtual que compartirán los diferentes
 jugadores, presenta mayor cantidad de elementos y además con más funcionalidad.
 
\end_layout

\begin_layout Standard
En el juego existen dos escenas de juego, las cuales representan cada una
 de ellas a un mapa de entre los que se puede elegir.
 Por lo tanto, entre estas escenas la única diferencia es el modelo 3D del
 mapa.
 
\end_layout

\begin_layout Standard
La escena se ha pensado para que aparezca un pequeño menú que permita al
 usuario empezar a jugar, cambiar algunos ajustes o salirse simplemente.
 En la Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:CapturaJuegoInicio"

\end_inset

 se puede ver cómo ha quedado esta pequeña interfaz que se comenta.
 El primer botón, 
\shape italic
Spawn
\shape default
, inicia el juego apareciendo el personaje el cual el jugador controla.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../figures/CapturaJuegoInicio.png
	width 75text%
	rotateOrigin center

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Captura del menú de inicio de la escena de juego
\begin_inset CommandInset label
LatexCommand label
name "fig:CapturaJuegoInicio"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Una vez empieza el juego, el jugador se pone en el papel del personaje,
 el cual aparece en uno de los punto de inicio definidos en el mapa.
 A partir de aquí el jugador puede moverse libremente por todo el mapa buscando
 al resto de jugadores que se unan a la partida.
 Como se observa en la Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:CapturaJuego2"

\end_inset

, la escena en principio parece sencilla con el modelo del mapa y los jugadores,
 pero para nada es así.
 Detrás de lo que se ve está toda la complejidad para permitir la interacción
 entre los jugadores.
 Posteriormente en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:IMPEstructura-del-videojuego"

\end_inset

 comentaremos más detenidamente las diferentes elementos que componen la
 escena que permiten la interacción entre los jugadores.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../figures/CapturaJuego2.png
	width 75text%
	rotateOrigin center

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Captura de la escena cuando el personaje parece en el juego.
\begin_inset CommandInset label
LatexCommand label
name "fig:CapturaJuego2"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Arquitectura de red
\end_layout

\begin_layout Standard
En esta sección se describe el modelo por el que se ha optado para el desarrollo
 del videojuego y además se comenta el diseño de la comunicación.
\end_layout

\begin_layout Subsubsection
Modelo de la Arquitectura
\end_layout

\begin_layout Standard
El paradigma por el que se ha optado para implementar el multijugador es
 el cliente-servidor (ver sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:EA-Modelo-Cliente-Servidor"

\end_inset

).
 El motivo de elegir está arquitectura es que Unity3D ofrece todo lo necesario
 para implementarla cómodamente y con relativa sencillez y velocidad.
 Además se ha optado por que los jugadores puedan ser también los servidores,
 es decir, uno de los jugadores será el servidor que acoja la partida y
 los demás jugadores se unen a esta.
 Al jugador que aloja el servidor se le denomina anfitrión (
\shape italic
host
\shape default
).
 
\end_layout

\begin_layout Standard
En la Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:ArquitecturaEoS"

\end_inset

 queda representada la arquitectura general del modo multijugador.
 Una vez que aún el jugador inicia una partida, se crea el servidor convirtiéndo
se así dicho jugador en un anfitrión al que se pueden unir otros jugadores
 para jugar la partida.
 Una vez estos jugadores se unen a la partida hay un intercambio de información
 entre ellos y el servidor localizado en el anfitrión.
 El anfitrión será el encargado de reenviar la actualizaciones al resto
 de usuarios para que así todos estén actualizados.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../figures/ArquitecturaEOS.png
	width 75text%
	rotateOrigin center

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Arquitectura de la red de EoS.
\begin_inset CommandInset label
LatexCommand label
name "fig:ArquitecturaEoS"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
El servidor es un servidor no acreditado, tal como se describe en la sección
 
\begin_inset CommandInset ref
LatexCommand ref
reference "par:Servidor-no-acreditado"

\end_inset

.
 Esto quiere decir que no controla el resultado de cada entrada del jugador.
 Los propios jugadores procesan las entradas y la lógica del juego localmente,
 y posteriormente envían el resultado de cualquier acción al servidor, este
 resultado puede ser la posición, que se pulso una tecla, etc.
 El servidor entonces sincroniza todas las acciones con el estado del mundo
 y reenvía a los restantes jugadores.
 Este tipo de servidor es más fácil de implementar ya que solamente necesita
 reenviar mensajes a los clientes, y no realiza un procesamiento adicional
 más allá de lo que los clientes hacen.
 Además, esto implica que no sea necesario ningún método de predicción local
 en los clientes para el manejo de las entidades propias, ya que ellos son
 los dueños y los únicos agentes autorizados a enviar modificaciones de
 esos objetos al servidor de la partida.
 
\end_layout

\begin_layout Subsubsection
Mensajes del Protocolo
\begin_inset CommandInset label
LatexCommand label
name "sub:Mensajes-del-Protocolo"

\end_inset


\end_layout

\begin_layout Standard
La comunicación entre el servidor y los clientes debe llevarse a cabo por
 medio de un protocolo.
 Este protocolo es propietario de Unity3D y se desconoce.
 Hay ciertos mensajes como por ejemplo para la conexión y desconexión tanto
 del servidor como de los clientes que se desconoce su formato exacto, aunque
 si se sabe que utiliza un esquema de Remote Procedure Call (RPC, 
\begin_inset CommandInset citation
LatexCommand citep
key "Unity3DRPC"

\end_inset

).
 Como punto fuerte Unity3D a través de su protocolo de comunicación permite
 enviar la información que se requiera, es decir se puede definir el contenido
 de los mensajes.
 Estos mensajes propios pueden contener cualquier información.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
En el caso de EoS ha sido necesario definir múltiples tipos de mensajes
 para sincronizar las animaciones de los personajes, de las armas, el movimiento
 del personaje, etc.
 Debido al objetivo del proyecto solamente se comentará el diseño propuesto
 para el mensaje que controla la posición y trayectoria.
 Este mensaje contendrá información sobre la cinemática del personaje ya
 que es la única información necesaria para sincronizar al personaje y aplicar
 las técnicas de predicción.
 En la Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:MensajeProtocolo"

\end_inset

 se observa el formato mensaje para la sincronización de los personajes.
 El mensaje está compuesto por la posición, velocidad, aceleración, velocidad
 angular y rotación, todos ellos flotantes.
 Está información permitirá sincronizar los personajes locales con los remotos
 permitiendo diseñar las técnicas de predicción que se han visto en la sección
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Técnicas-de-predicción"

\end_inset

.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../figures/MensajeProtocolo.png
	width 75text%
	rotateOrigin center

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Formato del mensaje para la sincronización de los personajes 
\begin_inset CommandInset label
LatexCommand label
name "fig:MensajeProtocolo"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Técnicas de predicción de movimiento 
\begin_inset CommandInset label
LatexCommand label
name "sub:DiseñoTécnicasPredicción"

\end_inset


\end_layout

\begin_layout Standard
En el capítulo 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Estado-del-Arte"

\end_inset

 se explicaron las distintas técnicas que se aplicarán en este diseño: la
 interpolación, predicción, convergencia y predicción de la entrada.
 Esta sección explica la adaptación necesaria para implementar las técnicas
 en el videojuego.
 El diseño realizado para las técnicas de predicción está divido en 3 partes:
 envío de los mensajes de actualización, recepción y procesamiento de la
 información.
\end_layout

\begin_layout Subsection
Envío de actualizaciones 
\end_layout

\begin_layout Standard
Para poder aplicar sobre la trayectoria de las entidades las técnicas de
 predicción es necesario que las entidades locales compartan envíen información
 hacia las entidades remotas.
 Esta información depende del tipo de técnica que se utilice (ver sección
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Técnicas-de-predicción"

\end_inset

).
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Lo más inteligente sería enviar solamente la información necesaria que se
 utilice en la técnica, pero debido a que se implementarán varias técnicas
 se ha concluido que es más cómodo enviar toda la información y después
 usar solamente la necesaria para la técnica en cuestión.
 Cada técnica necesita diferente información cinemática en función de su
 ecuación.
 
\end_layout

\begin_layout Standard
Cada entidad local envía la información en mensajes de actualización que
 se generan periódicamente a una tasa fija encapsulados en paquetes.
 Esta tasa se puede modificar durante el desarrollo del juego en función
 de las necesidades del juego.
 Por defecto, Unity3D le asigna un valor de 15 paquetes por segundo, por
 lo que a cada personaje remoto le llega aproximadamente un paquete cada
 66.66 ms.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../figures/InfActualizacion.png
	width 100text%
	rotateOrigin center

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Proceso de envío de los mesajes de actualización.
\begin_inset CommandInset label
LatexCommand label
name "fig:InformacionActualizacion"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Como se observa en la Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:InformacionActualizacion"

\end_inset

 las actualizaciones contienen los mensajes que se han definido en la sección
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Mensajes-del-Protocolo"

\end_inset

.
 El siguiente paso será ver como las entidad remotas reciben los mensajes
 que le llegan.
\end_layout

\begin_layout Subsection
Recepción de los mensajes de actualización
\begin_inset CommandInset label
LatexCommand label
name "sub:Recepción-de-las-actualizaciones"

\end_inset


\end_layout

\begin_layout Standard
Los mensajes de actualización con la información llegan a cada una de las
 entidades remotas, u objetos del juego que se han definido en red, que
 mantienen un 
\shape italic
buffer
\shape default
 circular de tamaño limitado.
 El objetivo es almacenar los paquetes más recientes, sobreescribiendo los
 más antiguos que ya no son útiles.
 Cuando un mensaje de actualización llega el 
\shape italic
buffer
\shape default
 se desplaza una posición eliminando el mensaje en la posición 0.
 De este modo queda un espacio para almacenar el nuevo mensaje recibido.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../figures/Buffer.png
	width 100text%
	rotateOrigin center

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout

\shape italic
Buffer
\shape default
 de recepción de los mensajes de actualización.
\begin_inset CommandInset label
LatexCommand label
name "fig:Buffer"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Los mensajes de actualización se almacenan junto con su marca de tiempo
 de llegada.
 Esta marca de tiempo la ofrece Unity3D y se explicará en la implementación.
 
\end_layout

\begin_layout Subsection
Procesamiento de los actualizaciones
\begin_inset CommandInset label
LatexCommand label
name "sub:DiseñoProcesamientoActualizaciones"

\end_inset


\end_layout

\begin_layout Standard
Esta parte al igual que la recepción solamente la llevan a cabo los personajes
 remotos.
 En cada fotograma los personajes remotos consultan el 
\shape italic
buffer
\shape default
 en busca de información para actualizar su estado.
 Para comprender como se actualiza el estado es antes necesario definir
 ciertos términos:
\end_layout

\begin_layout Itemize
Tiempo de renderizado, 
\begin_inset ERT
status open

\begin_layout Plain Layout

$t_{renderizado}$
\end_layout

\end_inset

: se define como el tiempo por el que el juego va generando las imágenes
 o fotogramas
\end_layout

\begin_layout Itemize
Tiempo de cliente, 
\begin_inset ERT
status open

\begin_layout Plain Layout

$t_{cliente}$
\end_layout

\end_inset

: es el tiempo actual de ejecución.
\end_layout

\begin_layout Standard
Estos tiempos son de gran importante ya que diferencian las técnicas que
 se utilizan para actualizar el estado del personaje.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Cuando se consulta en un fotograma el 
\shape italic
buffer
\shape default
 se busca el paquete con la marca de tiempo más actual.
 Esta marca de tiempo indica que técnica se aplicará para actualizar la
 posición del personaje.
 Según la marca de tiempo del paquete más actual en el 
\shape italic
buffer
\shape default
 existen 3 posibilidades: calcular la interpolación de las posiciones, la
 prediccón o no realizar ningún cálculo .
\end_layout

\begin_layout Subsubsection
Interpolación
\end_layout

\begin_layout Standard
La interpolación se aplica para que las trayectorias que siguen los personajes
 no esten entrecortadas.
 La interpolación se aplica en caso de que el paquete más reciente tenga
 una marca de tiempo que este por encima del tiempo del cliente menos un
 tiempo de interpolación.
 Es decir, que se encuentre en la ventana de interpolación.
 En la Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:DiseñoInterpolación"

\end_inset

 se representa un ejemplo.
 La línea principal indica el tiempo.
 En la figura se tienen actualizaciones cuyas marcas de tiempo están dentro
 de la ventana de interpolación por lo que se puede realizar la interpolación
 adecuadamente.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../figures/DiseñoInterpolación.png
	width 100text%
	rotateOrigin center

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
1º Caso: Interpolación.
\begin_inset CommandInset label
LatexCommand label
name "fig:DiseñoInterpolación"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
El tamaño de la ventana de interpolación depende directamente de la tasa
 de actualización que se establezca.
 Para interpolar la posición de la entidad hacen falta al menos uno o dos
 paquetes con los que interpolar.
 Por eso la ventana de interpolación debe durar al menos el doble del periodo
 de actualización, 
\begin_inset ERT
status open

\begin_layout Plain Layout

$t_{update}$
\end_layout

\end_inset

.
 La introducción de la interpolación supone un retraso entre el tiempo de
 cliente, 
\begin_inset ERT
status open

\begin_layout Plain Layout

$t_{cliente}$
\end_layout

\end_inset

, y el de renderizado, 
\begin_inset ERT
status open

\begin_layout Plain Layout

$t_{update}$
\end_layout

\end_inset

.
 El impacto de este retraso se comentarán en la evaluación.
 
\end_layout

\begin_layout Subsubsection
Predicción
\end_layout

\begin_layout Standard
Se aplica en caso de que el paquete más reciente esté por debajo del tiempo
 de renderizado, 
\begin_inset ERT
status open

\begin_layout Plain Layout

$t_{renderizado}$
\end_layout

\end_inset

, y por encima del tiempo máximo de predicción 
\begin_inset ERT
status open

\begin_layout Plain Layout

$t_{predicción}$
\end_layout

\end_inset

, a este intervalo se le llama ventana de predicción o extrapolación.
 Este caso queda representado en la Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:DiseñoPrediccón"

\end_inset

.
 El línea principal indica el tiempo.
 El tiempo de predicción, 
\begin_inset ERT
status open

\begin_layout Plain Layout

$t_{predicción}$
\end_layout

\end_inset

, depende mucho del tipo de aplicación.
 Tiene que ser un tiempo suficiente para mejorar el movimiento de las entidades
 cuando se producen problemas, pero no tan grande como para que se realicen
 predicciones muy desviadas.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../figures/DiseñoPredicción.png
	width 100text%
	rotateOrigin center

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
2º Caso: Predicción.
 
\begin_inset CommandInset label
LatexCommand label
name "fig:DiseñoPrediccón"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
En este caso es necesario diseñar como se aplicarán las ecuaciones de las
 técnicas de predicción vistas en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Técnicas-de-predicción"

\end_inset

.
 Las ecuaciones descriptas están pensadas para movimientos en una única
 dimensión.
 Por ello es necesario traducir las ecuaciones a un espacio en tres dimensiones.
 Para dicha traducción se ha tomado las variables de las ecuaciones como
 vectores en tres dimensiones.
 De esta forma las ecuaciones son las mismas, la única diferencia que las
 operaciones ahora no son escalares sino vectoriales.
 En la Tab.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:ClasificacionEcPrediccion3D"

\end_inset

 se muestra como quedarían las ecuaciones de la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Técnicas-de-predicción"

\end_inset

 en tres dimensiones.
 Cada vector de las ecuaciones está formado por 3 componentes: eje X, Y
 y Z.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top" width="2cm">
<column alignment="center" valignment="top" width="6cm">
<column alignment="center" valignment="top" width="6.5cm">
<row>
<cell alignment="center" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Un paso
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Dos pasos
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
1º Orden
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\overrightarrow{x_{t}}=\;\overrightarrow{x_{t'}}\;+\;\overrightarrow{v_{t'}}*t$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\overrightarrow{x_{t}}=\;\overrightarrow{x_{t'}}\;+\;\frac{\overrightarrow{x_{t'}}-\overrightarrow{x_{t''}}}{t'-t''}*t$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
2º Orden
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\overrightarrow{x_{t}}=\;\overrightarrow{x_{t'}}\;+\;\overrightarrow{v_{t'}}*t\;+\;\frac{1}{2}*\overrightarrow{a_{t'}}*t^{2}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\overrightarrow{x_{t}}=\;\overrightarrow{x_{t'}}\;+\;\overrightarrow{v_{t'}}*t\;+\;\frac{1}{2}*\frac{\overrightarrow{v_{t'}}-\overrightarrow{v_{t''}}}{t'-t''}*t^{2}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Definición de las expresiones de predicción en 3D.
\begin_inset CommandInset label
LatexCommand label
name "tab:ClasificacionEcPrediccion3D"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Sin actualización
\end_layout

\begin_layout Standard
En caso de que la marca de tiempo del paquete más actual sea menor que el
 tiempo máximo de extrapolación.
 Esta posibilidad es necesaria introducirla ya que no se puede predecir
 durante un tiempo infinito, ya que se estaría prediciendo a ciegas introduciend
o desviaciones elevadas.
 En la Fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:DiseñoNada"

\end_inset

 se muestra un esquema de ejemplo.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
centering
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename ../figures/DiseñoNada.png
	width 100text%
	rotateOrigin center

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
3º Caso: Sin Actualización.
 
\begin_inset CommandInset label
LatexCommand label
name "fig:DiseñoNada"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
